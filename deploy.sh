#!/usr/bin/env bash
set -euo pipefail
APP_DIR=/opt/crypto_strategy_project
cd "$APP_DIR"

# 確保所有權
chown -R deploy:deploy "$APP_DIR"

# 清除可能殘留的日期限制環境變數
unset START_DATE END_DATE

# venv
if [ ! -x .venv/bin/python ]; then
  python3 -m venv .venv
fi
. .venv/bin/activate
PY=.venv/bin/python
PIP=.venv/bin/pip

$PY -m pip install --upgrade pip setuptools wheel

# 先試 editable 安裝；失敗就退回 requirements.txt
if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
  $PIP install -e . || { echo "[deploy] editable install failed, fallback..."; true; }
fi
[ -f requirements.txt ] && $PIP install -r requirements.txt || true

# 訓練最新模型（過去360天）
echo "[deploy] training multi-symbol models (360 days)"
DAYS=360 $PY scripts/train_multi.py --cfg csp/configs/strategy.yaml

# 60天資料回測優化
echo "[deploy] backtest optimization (60 days)"
$PY scripts/feature_optimize.py --cfg csp/configs/strategy.yaml --days 60

# 生成並驗證策略設定檔
CFG="/opt/crypto_strategy_project/csp/configs/strategy.yaml"
MODELS_DIR="/opt/crypto_strategy_project/models"

# 確認模型檔案
echo "== available models =="
ls -R "$MODELS_DIR"

# 產出新的 strategy.yaml 指向部署好的模型
sudo tee "$CFG" >/dev/null <<'YAML'
# Auto-generated by CI deploy
symbols: [BTCUSDT, ETHUSDT, BCHUSDT]

require_models: true

data:
  mode: csv_only           # keep using local CSVs for now
  resources_dir: /opt/crypto_strategy_project/resources
  timeframe: 15m
  tz: UTC

models:
  BTCUSDT:
    dir: /opt/crypto_strategy_project/models/BTCUSDT
    xgb_json: xgb_h16.json
    scaler: scaler_h16.joblib
    feature_names: feature_names.json

  ETHUSDT:
    dir: /opt/crypto_strategy_project/models/ETHUSDT
    xgb_json: xgb_h16.json
    scaler: scaler_h16.joblib
    feature_names: feature_names.json

  BCHUSDT:
    dir: /opt/crypto_strategy_project/models/BCHUSDT
    xgb_json: xgb_h16.json
    scaler: scaler_h16.joblib
    feature_names: feature_names.json

notify:
  telegram:
    enabled: true
YAML

echo "== rendered strategy.yaml =="
sudo sed -n '1,120p' "$CFG"

echo "== sanity: expect models_loaded=3 =="
sudo -n /opt/crypto_strategy_project/.venv/bin/python \
  /opt/crypto_strategy_project/scripts/realtime_loop.py \
  --cfg "$CFG" --delay-sec 0 --once || true

# 安裝 systemd service/timer
if [ -d systemd ]; then
  sudo cp systemd/trader.service /etc/systemd/system/trader.service
  sudo cp systemd/trader.timer /etc/systemd/system/trader.timer
  sudo systemctl daemon-reload
  sudo systemctl enable trader.timer
  sudo systemctl start trader.timer
fi

# 重啟/觸發一次性服務
#sudo -n /usr/bin/systemctl restart trader
sudo -n /usr/bin/systemctl start trader-once.service

echo "[deploy] done at $(date '+%Y-%m-%d %H:%M:%S')"
