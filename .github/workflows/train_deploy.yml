name: Train-Backtest-Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train models (BTC/ETH/BCH)
        env:
          CSP_TRAIN_SYMBOLS: "BTCUSDT,ETHUSDT,BCHUSDT"
          CSP_TRAIN_OUTDIR: "models"
        run: |
          set -euo pipefail
          python scripts/train_multi.py \
            --symbols "$CSP_TRAIN_SYMBOLS" \
            --out-dir "$CSP_TRAIN_OUTDIR" \
            --cfg csp/configs/strategy.yaml
          echo "[CI] models tree:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/

  deploy:
    runs-on: ubuntu-latest
    needs: [train]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download trained models
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Show models (CI side)
        run: |
          echo "[CI] models tree after download:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync code + models to VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          RSYNC_FLAGS="-avz --delete --exclude .git --exclude .github"
          # 確保把 ./models/ 一起送上 VM
          rsync $RSYNC_FLAGS ./ "${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/repo_tmp/"

      - name: Deploy & Backtest on VM (produce remote tar + marker)
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_ID: ${{ github.run_id }}   # 用 run_id 當檔名後綴，Runner 與 VM 都看得到
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}" \
            TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}" \
            TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}" \
            RUN_ID="${RUN_ID}" \
            bash -euo pipefail -s <<'REMOTE'
          set -euo pipefail
          DST="/opt/crypto_strategy_project"

          echo "[DEPLOY] Sync to ${DST}"
          sudo -n rsync -a --delete "/home/$USER/repo_tmp/" "${DST}/"

          echo "[DEPLOY] Ensure venv & deps"
          if [ ! -x "${DST}/.venv/bin/python" ]; then
            sudo -n python3 -m venv "${DST}/.venv"
          fi
          sudo -n bash -lc "${DST}/.venv/bin/pip install --upgrade pip && \
                            [ -f ${DST}/requirements.txt ] && ${DST}/.venv/bin/pip install -r ${DST}/requirements.txt || true"

          echo "[ENV] Write /etc/crypto_strategy_project.env"
          sudo -n install -m 600 -o root -g root /dev/null /etc/crypto_strategy_project.env
          printf "TELEGRAM_BOT_TOKEN=%s\nTELEGRAM_CHAT_ID=%s\n" \
            "${TELEGRAM_BOT_TOKEN:-}" "${TELEGRAM_CHAT_ID:-}" | sudo -n tee /etc/crypto_strategy_project.env >/dev/null
          sudo -n chmod 600 /etc/crypto_strategy_project.env

          echo "[CHECK] Models exist before backtest"
          MROOT="${DST}/models"
          ls -l "${MROOT}" || true
          for d in BTCUSDT ETHUSDT BCHUSDT; do
            if [ ! -d "${MROOT}/${d}" ]; then
              echo "::error::Missing model dir: ${MROOT}/${d}"
              exit 1
            fi
          done
          if [ ! -s "${MROOT}/manifest.json" ]; then
            echo "::error::Missing ${MROOT}/manifest.json"
            exit 1
          fi

          echo "[BACKTEST] fetch=inc (latest data)"
          sudo -n "${DST}/.venv/bin/python" "${DST}/scripts/backtest_multi.py" \
            --cfg "${DST}/csp/configs/strategy.yaml" \
            --days 30 \
            --fetch inc \
            --save-summary --out-dir "${DST}/reports" --format both

          echo "[LOCATE] Find newest summary_all.json (1- or 2-level)"
          LATEST_JSON=$(ls -t "${DST}/reports"/*/summary_all.json "${DST}/reports"/*/*/summary_all.json 2>/dev/null | head -n1 || true)
          if [ -z "${LATEST_JSON}" ]; then
            echo "::error::No summary_all.json under ${DST}/reports"
            find "${DST}/reports" -type f | sort | tail -n 200 || true
            exit 1
          fi
          REPORTS_DIR="$(dirname "${LATEST_JSON}")"
          echo "[INFO] REPORTS_DIR=${REPORTS_DIR}"

          # 打包最新報表到 /tmp，並寫 marker
          REMOTE_TAR="/tmp/csp_reports_${RUN_ID}.tgz"
          REMOTE_MARKER="/tmp/csp_reports_dir_${RUN_ID}.txt"
          echo "[PACK] ${REPORTS_DIR} -> ${REMOTE_TAR}"
          sudo -n tar -C "${REPORTS_DIR}" -czf "${REMOTE_TAR}" .
          echo "${REPORTS_DIR}" | sudo -n tee "${REMOTE_MARKER}" >/dev/null

          # 顯示檔案存在以利除錯
          ls -l "${REMOTE_TAR}" "${REMOTE_MARKER}"

          # 不要在 VM 端做 jq Gate；改到 Runner 端做（因為 artifact 也在 Runner 上傳）
          REMOTE

      - name: Pull reports from VM to runner
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          REMOTE_TAR="/tmp/csp_reports_${RUN_ID}.tgz"
          REMOTE_MARKER="/tmp/csp_reports_dir_${RUN_ID}.txt"

          echo "[PULL] scp remote tar & marker"
          scp "${SSH_USER}@${SSH_HOST}:${REMOTE_TAR}" "./reports_ci.tgz"
          scp "${SSH_USER}@${SSH_HOST}:${REMOTE_MARKER}" "./reports_dir.txt"

          echo "[EXTRACT] to ./reports_latest"
          rm -rf reports_latest
          mkdir -p reports_latest
          tar -xzf reports_ci.tgz -C reports_latest

          echo "REPORTS_DIR=reports_latest" >> "$GITHUB_ENV"

      - name: Gate metrics (local on runner, using jq)
        run: |
          set -euo pipefail
          : "${REPORTS_DIR:?REPORTS_DIR not set}"
          SUMMARY="${REPORTS_DIR}/summary_all.json"
          if [ ! -s "${SUMMARY}" ]; then
            echo "::error::summary_all.json not found at ${SUMMARY}"
            find "${REPORTS_DIR}" -type f | sort || true
            exit 1
          fi

          echo "[INFO] Using ${SUMMARY}"
          jq -r '.' "${SUMMARY}" | head -n 50
          MAX_SIG=$(jq '[.[]?.signal_count // 0] | max' "${SUMMARY}")
          echo "[GATE] MAX signal_count=${MAX_SIG}"
          test "${MAX_SIG}" -ge 100

      - name: Upload latest report dir
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-latest
          path: ${{ env.REPORTS_DIR }}
          if-no-files-found: warn

      - name: Upload packed tar
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-tar
          path: reports_ci.tgz
          if-no-files-found: warn
