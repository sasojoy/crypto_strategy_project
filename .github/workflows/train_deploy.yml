name: Train-Backtest-Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train models (multi)
        env:
          CSP_TRAIN_SYMBOLS: "BTCUSDT,ETHUSDT,BCHUSDT"
          CSP_TRAIN_OUTDIR: "models"
        run: |
          set -euo pipefail
          python scripts/train_multi.py \
            --symbols "$CSP_TRAIN_SYMBOLS" \
            --out-dir "$CSP_TRAIN_OUTDIR" \
            --cfg csp/configs/strategy.yaml
          echo "[CI] models tree:" && find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Upload models
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/

  backtest_and_deploy_on_vm:
    runs-on: ubuntu-latest
    needs: [train]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download trained models
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync code + models to VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          rsync -avz --delete --exclude .git --exclude .github ./ \
            "${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/repo_tmp/"

      - name: Backtest (latest data) + (optional) Optimize + Deploy (on VM)
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          GIT_SHA: ${{ github.sha }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" \
            TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN" \
            TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID" \
            GIT_SHA="$GIT_SHA" \
            bash -euo pipefail -s <<'REMOTE'
          set -euo pipefail
          SRC="/home/$USER/repo_tmp"
          DST="/opt/crypto_strategy_project"

          echo "[DEPLOY] Sync to ${DST}"
          sudo -n rsync -a --delete "${SRC}/" "${DST}/"

          echo "[DEPLOY] Ensure venv & deps"
          if [ ! -x "${DST}/.venv/bin/python" ]; then sudo -n python3 -m venv "${DST}/.venv"; fi
          sudo -n bash -lc "${DST}/.venv/bin/pip install --upgrade pip && \
                            ${DST}/.venv/bin/pip install -r ${DST}/requirements.txt"

          echo "[ENV] Write /etc/crypto_strategy_project.env"
          sudo -n install -m 600 -o root -g root /dev/null /etc/crypto_strategy_project.env
          printf "TELEGRAM_BOT_TOKEN=%s\nTELEGRAM_CHAT_ID=%s\n" \
            "$TELEGRAM_BOT_TOKEN" "$TELEGRAM_CHAT_ID" | sudo -n tee /etc/crypto_strategy_project.env >/dev/null
          sudo -n chmod 600 /etc/crypto_strategy_project.env

          cd "${DST}"

          # (Optional, A 方案預設關閉) 參數最佳化模板
          # echo "[OPTIMIZE] Optuna"
          # "${DST}/.venv/bin/python" scripts/optimize_params.py \
          #   --cfg csp/configs/strategy.yaml \
          #   --symbols BTCUSDT,ETHUSDT,BCHUSDT \
          #   --trials 60 \
          #   --out models/opt_params.yaml

          echo "[BACKTEST] fetch=inc (latest data)"
          OUTDIR="reports/$(date -u +%Y%m%d_%H%M%S)"
          "${DST}/.venv/bin/python" scripts/backtest_multi.py \
            --cfg csp/configs/strategy.yaml \
            --days 30 \
            --fetch inc \
            --save-summary --out-dir "$OUTDIR" --format both

          echo "[GATE] Check metrics"
          jq . "$OUTDIR/summary_all.json"
          WIN_SUM=$(jq -r '.BTCUSDT.win_rate + .ETHUSDT.win_rate + .BCHUSDT.win_rate' "$OUTDIR/summary_all.json")
          SIG_SUM=$(jq -r '.BTCUSDT.signal_count + .ETHUSDT.signal_count + .BCHUSDT.signal_count' "$OUTDIR/summary_all.json")
          PF_SUM=$(jq -r '.BTCUSDT.profit_factor + .ETHUSDT.profit_factor + .BCHUSDT.profit_factor' "$OUTDIR/summary_all.json")
          PASS=1
          [ "$SIG_SUM" -lt 30 ] && PASS=0
          awk "BEGIN{if(!($WIN_SUM >= 1.2 && $PF_SUM >= 1.5)) exit 1}" || PASS=0
          if [ "$PASS" -ne 1 ]; then
            "${DST}/.venv/bin/python" scripts/smoke_telegram.py "❌ Gate NG build=${GIT_SHA:0:8} host=$(hostname)"
            exit 1
          fi

          echo "[SYSTEMD] Install/Reload"
          sudo -n cp systemd/trader-once.service /etc/systemd/system/trader-once.service
          sudo -n cp systemd/trader-once.timer   /etc/systemd/system/trader-once.timer
          [ -d /etc/systemd/system/trader-once.service.d ] && sudo -n rm -f /etc/systemd/system/trader-once.service.d/override.conf || true
          sudo -n systemctl daemon-reload
          sudo -n systemctl enable --now trader-once.timer
          sudo -n systemctl restart trader-once.timer
          sudo -n systemctl stop trader-once.service || true
          sudo -n systemctl start trader-once.service || true

          echo "[SMOKE] Telegram"
          "${DST}/.venv/bin/python" scripts/smoke_telegram.py "✅ Deploy OK build=${GIT_SHA:0:8} host=$(hostname)"

          echo "[PACK] backtest reports"
          tar czf /home/$USER/reports.tgz -C "${DST}" "$OUTDIR"
          REMOTE

      - name: Pull backtest artifact from VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: scp -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/reports.tgz" reports.tgz

      - name: Upload backtest reports
        uses: actions/upload-artifact@v4
        with:
          name: backtest-reports
          path: reports.tgz
