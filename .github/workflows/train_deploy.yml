name: Train-Backtest-Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train models (BTC/ETH/BCH)
        env:
          CSP_TRAIN_SYMBOLS: "BTCUSDT,ETHUSDT,BCHUSDT"
          CSP_TRAIN_OUTDIR: "models"
        run: |
          set -euo pipefail
          python scripts/train_multi.py \
            --symbols "$CSP_TRAIN_SYMBOLS" \
            --out-dir "$CSP_TRAIN_OUTDIR" \
            --cfg csp/configs/strategy.yaml
          echo "[CI] models tree:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/

  deploy:
    runs-on: ubuntu-latest
    needs: [train]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download trained models
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Show models (CI side)
        run: |
          echo "[CI] models tree after download:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync code + models to VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          RSYNC_FLAGS="-avz --delete --exclude .git --exclude .github"
          # 確保把 ./models/ 一起送上 VM
          rsync $RSYNC_FLAGS ./ "${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/repo_tmp/"

      # === 在 VM 上：同步、建 venv、安裝依賴、寫 env、回測（確保在專案根目錄執行）===
      - name: Backtest on VM (fresh data, and pack latest reports)
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}" \
            TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}" \
            TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}" \
            RUN_ID="${RUN_ID}" \
            bash -euo pipefail -s <<'REMOTE'
          set -euo pipefail
          DST="/opt/crypto_strategy_project"

          echo "[DEPLOY] Sync to ${DST}"
          sudo -n rsync -a --delete "/home/$USER/repo_tmp/" "${DST}/"

          echo "[DEPLOY] Ensure venv & deps"
          if [ ! -x "${DST}/.venv/bin/python" ]; then
            sudo -n python3 -m venv "${DST}/.venv"
          fi
          sudo -n bash -lc "${DST}/.venv/bin/pip install --upgrade pip && \
                            [ -f ${DST}/requirements.txt ] && ${DST}/.venv/bin/pip install -r ${DST}/requirements.txt || true"

          echo "[ENV] Write /etc/crypto_strategy_project.env"
          sudo -n install -m 600 -o root -g root /dev/null /etc/crypto_strategy_project.env
          printf "TELEGRAM_BOT_TOKEN=%s\nTELEGRAM_CHAT_ID=%s\n" \
            "${TELEGRAM_BOT_TOKEN:-}" "${TELEGRAM_CHAT_ID:-}" | sudo -n tee /etc/crypto_strategy_project.env >/dev/null
          sudo -n chmod 600 /etc/crypto_strategy_project.env

          echo "[CHECK] Models exist before backtest"
          if [ -d "${DST}/models" ]; then
            ls -l "${DST}/models" || true
            find "${DST}/models" -maxdepth 1 -type d -printf "%f\n" | sort || true
          else
            echo "::error::No models directory at ${DST}/models"
            exit 1
          fi

          echo "[BACKTEST] fetch=inc (latest data)"
          # ★★★ 關鍵：進入專案根目錄，再執行回測，確保相對路徑 models/ 與 resources/ 正確
          cd "${DST}"
          sudo -n "${DST}/.venv/bin/python" scripts/backtest_multi.py \
            --cfg csp/configs/strategy.yaml \
            --days 30 \
            --fetch inc \
            --save-summary --out-dir reports --format both

          echo "[LOCATE] Find newest summary_all.json (supports 1- or 2-level ts)"
          LATEST_JSON=$(ls -t "reports"/*/summary_all.json "reports"/*/*/summary_all.json 2>/dev/null | head -n1 || true)
          if [ -z "${LATEST_JSON}" ]; then
            echo "::error::No summary_all.json under reports/"
            find "reports" -type f | sort | tail -n 200 || true
            exit 1
          fi
          REPORTS_DIR="$(dirname "${LATEST_JSON}")"
          echo "[INFO] REPORTS_DIR=${REPORTS_DIR}"

          # 打包最新報表到 /tmp，並寫 marker（Runner 端會 s cp 取回）
          REMOTE_TAR="/tmp/csp_reports_${RUN_ID}.tgz"
          REMOTE_MARKER="/tmp/csp_reports_dir_${RUN_ID}.txt"
          echo "[PACK] ${REPORTS_DIR} -> ${REMOTE_TAR} (contents only)"
          sudo -n tar -C "${REPORTS_DIR}" -czf "${REMOTE_TAR}" ./
          echo "${REPORTS_DIR}" | sudo -n tee "${REMOTE_MARKER}" >/dev/null

          # 顯示檔案存在以利除錯
          ls -l "${REMOTE_TAR}" "${REMOTE_MARKER}"
          REMOTE

      # === 從 VM 取回打包檔，Runner 端做 Gate 與 Artifact 上傳 ===
      - name: Download reports tar from VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}:/tmp/csp_reports_${RUN_ID}.tgz" "./csp_reports_${RUN_ID}.tgz"
          scp -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}:/tmp/csp_reports_dir_${RUN_ID}.txt" "./csp_reports_dir_${RUN_ID}.txt"
          ls -l "./csp_reports_${RUN_ID}.tgz" "./csp_reports_dir_${RUN_ID}.txt"

      - name: Extract and Gate on Runner
        run: |
          set -euo pipefail
          mkdir -p extracted_reports
          tar -C extracted_reports -xzf "csp_reports_${{ github.run_id }}.tgz"
          echo "[GATE] Show extracted files:"
          find extracted_reports -type f | sort
          if [ ! -f extracted_reports/summary_all.json ]; then
            echo "::error::summary_all.json not found in extracted_reports/"
            exit 1
          fi
          echo "[GATE] Example metric checks with jq (可依你的門檻調整)："
          cat extracted_reports/summary_all.json | jq .
          # 例如：檢查至少一個幣 Sharpe > 0（或你自己的門檻）
          OK_CNT=$(jq '[ .[] | select(.sharpe_ratio > 0) ] | length' extracted_reports/summary_all.json)
          if [ "${OK_CNT}" -lt 1 ]; then
            echo "::warning::No symbol passed Sharpe > 0 gate; not failing build by default."
          fi

      - name: Upload Backtest Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backtest_reports_${{ github.run_id }}
          path: |
            csp_reports_${{ github.run_id }}.tgz
            csp_reports_dir_${{ github.run_id }}.txt
            extracted_reports/**
