name: Train and Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .

      - name: Train models
        run: |
          set -euo pipefail
          python scripts/train_multi.py --cfg csp/configs/strategy.yaml

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: models
          path: models

  deploy:
    runs-on: ubuntu-latest
    needs: train
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download models artifact
        uses: actions/download-artifact@v4
        with:
          name: models
          path: models

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Rsync repo to VM
        run: |
          set -euo pipefail
          rsync -az --delete --exclude '.git' -e "ssh -o StrictHostKeyChecking=yes" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:repo_tmp/

      - name: Deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -s' <<'EOF'
          set -euo pipefail
          VM_PATH=/opt/crypto_strategy_project
          sudo -n rsync -a --delete ~/repo_tmp/ $VM_PATH/
          sudo -n rsync -a ~/repo_tmp/models/ $VM_PATH/models/
          if [ -d "$VM_PATH/systemd" ]; then
            sudo -n cp $VM_PATH/systemd/*.service /etc/systemd/system/ || true
            sudo -n cp $VM_PATH/systemd/*.timer /etc/systemd/system/ || true
          fi
          sudo -n systemctl daemon-reload
          sudo -n systemctl enable --now trader-once.timer
          sudo -n systemctl start trader-once.service
          sudo -n systemctl status trader-once.timer --no-pager
          sudo -n systemctl status trader-once.service --no-pager
          ls -la $VM_PATH/models
          grep -A4 -n "models" $VM_PATH/csp/configs/strategy.yaml || true
          sudo -n journalctl -u trader-once.service --since "-30 min" -o cat | tail -n 200 || true
EOF
