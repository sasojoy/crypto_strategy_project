name: Train & Deploy (models + systemd)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ci-train-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  PY_VER: "3.11"
  TZ: ${{ secrets.TZ || 'Asia/Taipei' }}
  VM_PATH: "/opt/crypto_strategy_project"
  REPO_TMP: "/home/${{ secrets.SSH_USER }}/repo_tmp"
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  train:
    name: A+B Train models
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # 若 train_multi 需要額外 lib，請在這裡安裝
          # 例：sudo apt-get update && sudo apt-get install -y libatlas-base-dev

      - name: Sanity check training entry
        run: |
          ls -la scripts || true
          python -c "import sys, pathlib; p=pathlib.Path('scripts/train_multi.py'); assert p.exists(), f'{p} not found'"

      - name: Run training (multi symbols)
        # 這一步會把模型存進 repo 下的 models/<symbol>/...
        # 若你的 config 不是這個路徑，請改參數
        run: |
          set -euo pipefail
          echo "[TRAIN] start: $(date -Iseconds)"
          python scripts/train_multi.py --cfg csp/configs/strategy.yaml
          echo "[TRAIN] done: $(date -Iseconds)"
          echo
          echo "[TRAIN] list generated models:"
          find models -maxdepth 2 -type f | sed 's/^/ - /' || true

      - name: Pack models artifact
        # 用 tar 壓縮，保留目錄層級，deploy job 再解壓到 VM
        run: |
          set -euo pipefail
          tar -C . -czf models_artifact.tgz models
          du -h models_artifact.tgz

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: models_artifact
          path: models_artifact.tgz
          retention-days: 7

  deploy:
    name: C+D Deploy & Sanity check
    runs-on: ubuntu-22.04
    needs: [train]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download models artifact
        uses: actions/download-artifact@v4
        with:
          name: models_artifact
          path: .

      - name: Prepare SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts (strict)
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p "${{ env.SSH_PORT }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=yes -p "${{ env.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'true'

      - name: Upload repo snapshot to VM (rsync)
        run: |
          set -euo pipefail
          rsync -e "ssh -p $SSH_PORT" -az --delete --exclude ".git" ./ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.REPO_TMP }}/"

      - name: Upload models artifact to VM
        run: |
          set -euo pipefail
          scp -P "$SSH_PORT" models_artifact.tgz "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.REPO_TMP }}/"

      - name: Install & reload on VM (code + models + systemd)
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=yes -p "$SSH_PORT" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'bash -s' <<'REMOTE'
          set -euo pipefail
          export TZ="${TZ:-Asia/Taipei}"

          echo "[DEPLOY] Sync code to $VM_PATH"
          sudo -n mkdir -p "$VM_PATH"
          sudo -n rsync -a --delete "$REPO_TMP"/ "$VM_PATH"/

          echo "[DEPLOY] Unpack models"
          sudo -n mkdir -p "$VM_PATH/models"
          sudo -n tar -C "$VM_PATH" -xzf "$REPO_TMP/models_artifact.tgz"

          echo "[DEPLOY] Ensure venv"
          if [ ! -d "$VM_PATH/.venv" ]; then
            python3 -m venv "$VM_PATH/.venv"
          fi
          "$VM_PATH/.venv/bin/python" -m pip install --upgrade pip
          if [ -f "$VM_PATH/requirements.txt" ]; then
            "$VM_PATH/.venv/bin/pip" install -r "$VM_PATH/requirements.txt"
          fi

          echo "[DEPLOY] Install/overwrite systemd units"
          # 優先使用 repo 的 systemd/ 目錄；若沒有就嘗試直接在 repo root 的檔案（容錯）
          if [ -d "$VM_PATH/systemd" ]; then
            SRC_DIR="$VM_PATH/systemd"
          else
            SRC_DIR="$VM_PATH"
          fi

          sudo -n cp "$SRC_DIR/trader-once.service" /etc/systemd/system/trader-once.service
          sudo -n cp "$SRC_DIR/trader-once.timer"   /etc/systemd/system/trader-once.timer

          # 可選：有常駐 service 就一起處理
          if [ -f "$SRC_DIR/trader.service" ]; then
            sudo -n cp "$SRC_DIR/trader.service" /etc/systemd/system/trader.service
          fi
          if [ -f "$SRC_DIR/trader.timer" ]; then
            sudo -n cp "$SRC_DIR/trader.timer" /etc/systemd/system/trader.timer
          fi

          echo "[DEPLOY] daemon-reload + enable + restart once timer"
          sudo -n systemctl daemon-reload
          sudo -n systemctl stop trader-once.service || true
          sudo -n systemctl enable --now trader-once.timer
          sudo -n systemctl start trader-once.service

          echo "[DEPLOY] Status"
          sudo -n systemctl status trader-once.timer --no-pager || true
          sudo -n systemctl status trader-once.service --no-pager || true

          echo "[DEPLOY] Sanity journal (last run)"
          if ! sudo -n journalctl -u trader-once.service --since "-30 min" -o cat | tail -n 200 ; then
            sudo -n journalctl -u trader-once.service -n 200 -o cat || true
          fi
REMOTE

      - name: Final sanity check on VM (echo signal & reason)
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=yes -p "$SSH_PORT" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'bash -s' <<'REMOTE'
          set -euo pipefail
          cd "$VM_PATH"
          echo
          echo "== quick dry-run (once) =="
          "$VM_PATH/.venv/bin/python" "$VM_PATH/scripts/realtime_loop.py" --cfg "$VM_PATH/csp/configs/strategy.yaml" --delay-sec 1 --once || true
          echo
          echo "== show last 100 lines =="
          sudo -n journalctl -u trader-once.service -n 100 -o cat || true
REMOTE
