name: Train & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Train models (BTCUSDT/ETHUSDT/BCHUSDT)
        env:
          CSP_TRAIN_SYMBOLS: "BTCUSDT,ETHUSDT,BCHUSDT"
          CSP_TRAIN_OUTDIR: "models"
        run: |
          set -euo pipefail
          python scripts/train_multi.py \
            --symbols "$CSP_TRAIN_SYMBOLS" \
            --out-dir "$CSP_TRAIN_OUTDIR" \
            --cfg csp/configs/strategy.yaml
          echo "[CI] models tree:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/

  deploy:
    runs-on: ubuntu-latest
    needs: [train]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download trained models
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Show models
        run: |
          echo "[CI] models tree after download:"
          find models -maxdepth 2 -type f | sort
          test -s models/manifest.json

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync code + models to VM
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          RSYNC_FLAGS="-avz --delete --exclude .git --exclude .github"
          rsync $RSYNC_FLAGS ./ "${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/repo_tmp/"

      - name: Deploy to VM (sync + env + systemd)
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          GIT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          # 把 secrets 帶進遠端 shell 環境；在遠端展開與寫檔，避免 heredoc 引號陷阱
          ssh -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" \
            TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}' \
            TELEGRAM_CHAT_ID='${{ secrets.TELEGRAM_CHAT_ID }}' \
            GIT_SHA="$GIT_SHA" \
            bash -euo pipefail -s <<'REMOTE'
          set -euo pipefail
          SRC="/home/$USER/repo_tmp"
          DST="/opt/crypto_strategy_project"

          echo "[DEPLOY] Sync code (including models/) to ${DST}"
          sudo -n rsync -a --delete "${SRC}/" "${DST}/"

          echo "[DEPLOY] Ensure venv"
          if [ ! -x "${DST}/.venv/bin/python" ]; then
            sudo -n python3 -m venv "${DST}/.venv"
          fi
          sudo -n bash -lc "${DST}/.venv/bin/pip install --upgrade pip && \
                            [ -f ${DST}/requirements.txt ] && ${DST}/.venv/bin/pip install -r ${DST}/requirements.txt || true"

          echo "[DEPLOY] Provision env for systemd (/etc/crypto_strategy_project.env)"
          sudo -n install -m 600 -o root -g root /dev/null /etc/crypto_strategy_project.env
          printf 'TELEGRAM_BOT_TOKEN=%s\nTELEGRAM_CHAT_ID=%s\n' \
            "$TELEGRAM_BOT_TOKEN" "$TELEGRAM_CHAT_ID" | sudo -n tee /etc/crypto_strategy_project.env >/dev/null
          sudo -n awk -F= '/^TELEGRAM_(BOT_TOKEN|CHAT_ID)=/ {printf("[CHECK] %s present len=%d\n",$1,length($2))}' /etc/crypto_strategy_project.env

          echo "[DEPLOY] Install systemd units"
          sudo -n cp "${DST}/systemd/trader-once.service" /etc/systemd/system/trader-once.service
          sudo -n cp "${DST}/systemd/trader-once.timer"   /etc/systemd/system/trader-once.timer
          sudo -n mkdir -p /etc/systemd/system/trader-once.service.d
          printf '%s\n%s\n%s\n' '[Service]' \
            'EnvironmentFile=-/etc/crypto_strategy_project.env' \
            'Environment=PYTHONUNBUFFERED=1' \
            | sudo -n tee /etc/systemd/system/trader-once.service.d/override.conf >/dev/null

          echo "[DEPLOY] Reload & (re)start timer/service"
          sudo -n systemctl daemon-reload
          sudo -n systemctl enable --now trader-once.timer
          sudo -n systemctl restart trader-once.timer
          sudo -n systemctl stop trader-once.service || true
          if ! sudo -n systemctl start trader-once.service ; then
            echo "::warning::trader-once.service failed to start, dumping logs"
            sudo -n systemctl status trader-once.service --no-pager || true
            sudo -n journalctl -xeu trader-once.service --no-pager -n 200 || true
            # 不讓 CI 因通知/環境問題中斷：繼續往下執行
          fi

          echo "[SMOKE] Telegram one-shot (does not fail build)"
          # 直接在 VM 上做一次最小測試：只回報狀態碼與錯誤文字，避免洩漏 token
          sudo -n env TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN" TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID" \
            "${DST}/.venv/bin/python" "${DST}/scripts/smoke_telegram.py" "✅ Deploy OK build=${GIT_SHA:0:8} host=$(hostname)" || true

          echo "[DEPLOY] Status"
          sudo -n systemctl status trader-once.timer   --no-pager || true
          sudo -n systemctl status trader-once.service --no-pager || true
          sudo -n systemctl list-timers --all | grep -i trader-once || true
          REMOTE
